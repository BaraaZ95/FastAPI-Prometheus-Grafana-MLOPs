version: "3.8"

services:
  app:
    build:
      context: ./app
    restart: unless-stopped
    container_name: app
    ports:
      - 8000:8000
    networks:
      example-network:
        ipv4_address: 172.16.238.10
    environment:
     - MLFLOW_TRACKING_URI=http://mlflow:5000
     - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
     - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
     - MLFLOW_S3_ENDPOINT_URL=http://minio:9000


  minio:
        restart: always
        image: minio/minio@sha256:2c8ac2a6255a2fa7b73a0a3647314c07121432b8ca1ce4ed8bfe31ca8495d7f7
        container_name: mlflow_s3
        ports:
            - "9000:9000"
            - "9001:9001"
        command: server /data --console-address ':9001' --address ':9000'
        environment:
            - MINIO_ROOT_USER=${AWS_ACCESS_KEY_ID}
            - MINIO_ROOT_PASSWORD=${AWS_SECRET_ACCESS_KEY}
        volumes:
            - minio_data:/data
        networks:
          example-network:
            ipv4_address: 172.16.238.13
  mc:
      image: minio/mc@sha256:3adae97df95c66b301b25ca7b38a9d7cfbd93b8f0652687331d552cd046dbfc1
      depends_on:
          - minio
      container_name: mc
      env_file:
          - .env
      entrypoint: >
          /bin/sh -c "
          /tmp/wait-for-it.sh minio:9000 &&
          /usr/bin/mc alias set minio http://minio:9000 ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY} &&
          /usr/bin/mc mb minio/mlflow;
          exit 0;
          "
      volumes:
          - ./wait-for-it.sh:/tmp/wait-for-it.sh
      networks:
        example-network:
          ipv4_address: 172.16.238.14

  db:
      restart: always
      image: mysql/mysql-server@sha256:5b40d96b11333570143d98d3a74100fefadb9abb17b27a95dbc9ad33544ec142
      container_name: mlflow_db
      ports:
          - "3306:3306"
      environment:
          - MYSQL_DATABASE=${MYSQL_DATABASE}
          - MYSQL_USER=${MYSQL_USER}
          - MYSQL_PASSWORD=${MYSQL_PASSWORD}
          - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      volumes:
          - dbdata:/var/lib/mysql
      networks:
        example-network:
          ipv4_address: 172.16.238.15
#      healthcheck:
#        test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
#        interval: 10s
#        timeout: 20s
#        retries: 10

  web:
      restart: always
      build: ./mlflow
      image: mlflow_server
      container_name: mlflow_server
      depends_on:
        db:
          condition: service_healthy
      ports:
          - "5000:5000"
      environment:
          - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
          - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
          - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      command: >
        sh -c "
        /wait-for-it.sh db:3306 -t 60 &&
        mlflow server --backend-store-uri mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@db:3306/${MYSQL_DATABASE} --default-artifact-root s3://mlflow/ --host 0.0.0.0
        "
      volumes:
      - ./wait-for-it.sh:/wait-for-it.sh
      networks:
        example-network:
          ipv4_address: 172.16.238.16

  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      example-network:
        ipv4_address: 172.16.238.11

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
    env_file:
      - ./grafana/config.monitoring
    networks:
      example-network:
        ipv4_address: 172.16.238.12

networks:
  example-network:
    name: example-network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.238.0/24
volumes:
    dbdata:
    minio_data:
